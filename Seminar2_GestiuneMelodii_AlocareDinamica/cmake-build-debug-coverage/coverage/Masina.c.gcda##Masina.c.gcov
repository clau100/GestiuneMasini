        -:    0:Source:C:/Users/user/Downloads/GestiuneMasini_AlocareDinamica/Seminar2_GestiuneMelodii_AlocareDinamica/Seminar2_GestiuneMelodii_AlocareDinamica/Masina.c
        -:    0:Graph:C:\Users\user\Downloads\GestiuneMasini_AlocareDinamica\Seminar2_GestiuneMelodii_AlocareDinamica\cmake-build-debug-coverage\CMakeFiles\Seminar2_GestiuneMelodii_AlocareDinamica.dir\Seminar2_GestiuneMelodii_AlocareDinamica\Masina.c.gcno
        -:    0:Data:C:\Users\user\Downloads\GestiuneMasini_AlocareDinamica\Seminar2_GestiuneMelodii_AlocareDinamica\cmake-build-debug-coverage\CMakeFiles\Seminar2_GestiuneMelodii_AlocareDinamica.dir\Seminar2_GestiuneMelodii_AlocareDinamica\Masina.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:#include "Masina.h"
        -:    3:#include <string.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <assert.h>
        -:    6:
function createMasina called 35 returned 100% blocks executed 100%
       35:    7:Masina createMasina(char* nr_inmat, char* model, char* categorie) {
       35:    7-block  0
        -:    8:	Masina m;
       35:    9:	int nrC = (int) strlen(nr_inmat)+1;
       35:   10:	m.nr_inmat = malloc( nrC * sizeof(char));
       35:   11:	strcpy(m.nr_inmat, nr_inmat);
        -:   12:
       35:   13:	nrC = (int) strlen(model) + 1;
       35:   14:	m.model = malloc(nrC * sizeof(char));
       35:   15:	strcpy(m.model, model);
        -:   16:
       35:   17:    nrC = (int) strlen(categorie) + 1;
       35:   18:    m.categorie = malloc(nrC * sizeof(char));
       35:   19:    strcpy(m.categorie, categorie);
       35:   20:	return m;
       35:   20-block  0
        -:   21:}
        -:   22:
function destroyMasina called 35 returned 100% blocks executed 100%
       35:   23:void destroyMasina(Masina* m) {
       35:   23-block  0
       35:   24:	free(m->nr_inmat);
       35:   25:	free(m->model);
       35:   26:    free(m->categorie);
       35:   27:}
        -:   28:
function copyMasina called 6 returned 100% blocks executed 100%
        6:   29:Masina copyMasina(Masina m) {
        6:   29-block  0
        6:   30:	return createMasina(m.nr_inmat, m.model, m.categorie);
        6:   30-block  0
call    0 returned 6
        -:   31:}
function valideazaMasina called 20 returned 100% blocks executed 100%
       20:   32:int valideazaMasina(Masina m) {
       20:   32-block  0
       20:   33:	if (strlen(m.nr_inmat) == 0)
       20:   33-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 18
        2:   34:		return 0;
        2:   34-block  0
       18:   35:	if (strlen(m.model) == 0)
       18:   35-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 17
        1:   36:		return 0;
        1:   36-block  0
       17:   37:	return strlen(m.categorie) != 0;
       17:   37-block  0
        -:   38:}
        -:   39:
function testCreateDestroy called 1 returned 100% blocks executed 67%
        1:   40:void testCreateDestroy() {
        1:   40-block  0
        1:   41:	Masina m = createMasina("BH14ECM", "Seat Ibiza", "Coupe");
        1:   41-block  0
call    0 returned 1
        -:   42:
        1:   43:	assert(strcmp(m.nr_inmat, "BH14ECM") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   43-block  0
call    2 never executed
        1:   44:	assert(strcmp(m.model, "Seat Ibiza") == 0);
        1:   44-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   44-block  1
call    2 never executed
        1:   45:	assert(strcmp(m.categorie, "Coupe") == 0);
        1:   45-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   45-block  1
call    2 never executed
        -:   46:
        1:   47:	destroyMasina(&m);
        1:   47-block  0
call    0 returned 1
        1:   48:}
        -:   49:
function testValideaza called 1 returned 100% blocks executed 81%
        1:   50:void testValideaza() {
        1:   50-block  0
        1:   51:	Masina m1 = createMasina("", "Seat Ibiza", "suv");
        1:   51-block  0
call    0 returned 1
        1:   52:	assert(valideazaMasina(m1) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   52-block  0
call    3 never executed
        -:   53:
        1:   54:	Masina m2 = createMasina("ABC", "", "suv");
        1:   54-block  0
call    0 returned 1
        1:   55:	assert(valideazaMasina(m2) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   55-block  0
call    3 never executed
        -:   56:
        1:   57:	Masina m3 = createMasina("ABC", "Seat Ibiza", "");
        1:   57-block  0
call    0 returned 1
        1:   58:	assert(valideazaMasina(m3) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   58-block  0
call    3 never executed
        -:   59:
        1:   60:	Masina m4 = createMasina("ABC", "Seat Ibiza", "suv");
        1:   60-block  0
call    0 returned 1
        1:   61:	assert(valideazaMasina(m4) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   61-block  0
call    3 never executed
        -:   62:
        1:   63:	destroyMasina(&m1);
        1:   63-block  0
call    0 returned 1
        1:   64:	destroyMasina(&m2);
call    0 returned 1
        1:   65:	destroyMasina(&m3);
call    0 returned 1
        1:   66:	destroyMasina(&m4);
call    0 returned 1
        -:   67:
        1:   68:}
