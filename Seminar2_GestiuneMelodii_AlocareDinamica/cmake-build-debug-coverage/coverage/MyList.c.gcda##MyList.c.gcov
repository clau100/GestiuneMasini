        -:    0:Source:C:/Users/user/Downloads/GestiuneMasini_AlocareDinamica/Seminar2_GestiuneMelodii_AlocareDinamica/Seminar2_GestiuneMelodii_AlocareDinamica/MyList.c
        -:    0:Graph:C:\Users\user\Downloads\GestiuneMasini_AlocareDinamica\Seminar2_GestiuneMelodii_AlocareDinamica\cmake-build-debug-coverage\CMakeFiles\Seminar2_GestiuneMelodii_AlocareDinamica.dir\Seminar2_GestiuneMelodii_AlocareDinamica\MyList.c.gcno
        -:    0:Data:C:\Users\user\Downloads\GestiuneMasini_AlocareDinamica\Seminar2_GestiuneMelodii_AlocareDinamica\cmake-build-debug-coverage\CMakeFiles\Seminar2_GestiuneMelodii_AlocareDinamica.dir\Seminar2_GestiuneMelodii_AlocareDinamica\MyList.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "MyList.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:
function createEmpty called 13 returned 100% blocks executed 100%
       13:    6:MyList createEmpty() {
       13:    6-block  0
        -:    7:	MyList v;
       13:    8:	v.capacitate = 2;
       13:    9:	v.length = 0;
       13:   10:	v.elems = malloc(sizeof(ElemType) * v.capacitate);
       13:   11:	return v;
       13:   11-block  0
        -:   12:}
        -:   13:
function destroy called 13 returned 100% blocks executed 100%
       13:   14:void destroy(MyList* v) {
       13:   14-block  0
       39:   15:	for (int i = 0; i < v->length; i++) {
       13:   15-block  0
       39:   15-block  1
branch  0 taken 26
branch  1 taken 13 (fallthrough)
       26:   16:		ElemType el = get(v, i);
       26:   16-block  0
call    0 returned 26
       26:   17:		destroyMasina(&el);
call    0 returned 26
        -:   18:	}
       13:   19:	v->length = 0;
       13:   20:	free(v->elems);
       13:   21:}
        -:   22:
function get called 53 returned 100% blocks executed 100%
       53:   23:ElemType get(MyList* v, int poz) {
       53:   23-block  0
       53:   24:	return v->elems[poz];
       53:   24-block  0
        -:   25:}
function setElem called 1 returned 100% blocks executed 100%
        1:   26:ElemType setElem(MyList* v, int poz, ElemType el) {
        1:   26-block  0
        1:   27:	ElemType replacedElement = v->elems[poz];
        1:   28:	v->elems[poz] = el;
        1:   29:	return replacedElement;
        1:   29-block  0
        -:   30:}
        -:   31:
        -:   32:
function size called 15 returned 100% blocks executed 100%
       15:   33:int size(MyList* v) {
       15:   33-block  0
       15:   34:	return v->length;
       15:   34-block  0
        -:   35:}
        -:   36:
function add called 27 returned 100% blocks executed 100%
       27:   37:void add(MyList* v, ElemType el) {
       27:   37-block  0
        -:   38:	//pt. vector dinamic - se face resize
       27:   39:	if (v->length == v->capacitate) {
       27:   39-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 21
        6:   40:		int newCapacitate = v->capacitate * 2;
        6:   41:		ElemType* aux_elems = malloc(sizeof(ElemType) * newCapacitate);
       18:   42:		for (int i = 0; i < v->length; i++) {
        6:   42-block  0
       12:   42-block  1
       18:   42-block  2
branch  0 taken 12
branch  1 taken 6 (fallthrough)
       12:   43:			aux_elems[i] = v->elems[i];
        -:   44:		}
        6:   45:		free(v->elems);
        6:   46:		v->elems = aux_elems;
        6:   47:		v->capacitate = newCapacitate;
        6:   47-block  0
        -:   48:	}
        -:   49:
       27:   50:	v->elems[v->length] = el;
       27:   51:	v->length++;
       27:   52:}
function delete called 1 returned 100% blocks executed 100%
        1:   53:ElemType delete(MyList* v, int poz) {
        1:   53-block  0
        1:   54:	ElemType el = v->elems[poz];
        3:   55:	for (int i = poz; i < v->length-1; i++) {
        1:   55-block  0
        2:   55-block  1
        3:   55-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   56:		v->elems[i] = v->elems[i + 1];
        -:   57:	}
        1:   58:	v->length--;
        1:   59:	return el;
        1:   59-block  0
        -:   60:}
        -:   61:
function copyList called 2 returned 100% blocks executed 100%
        2:   62:MyList copyList(MyList* v) {
        2:   62-block  0
        2:   63:	MyList v_copy = createEmpty();
        2:   63-block  0
call    0 returned 2
        8:   64:	for (int i = 0; i < v->length; i++) {
        8:   64-block  0
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:   65:		ElemType el = get(v, i);
        6:   65-block  0
call    0 returned 6
        6:   66:		add(&v_copy, copyMasina(el));
call    0 returned 6
call    1 returned 6
        -:   67:	}
        2:   68:	return v_copy;
        2:   68-block  0
        -:   69:}
        -:   70:
function testCreateVector called 1 returned 100% blocks executed 83%
        1:   71:void testCreateVector() {
        1:   71-block  0
        1:   72:	MyList v = createEmpty();
        1:   72-block  0
call    0 returned 1
        -:   73:	//assert(v.length == 0);
        1:   74:	assert(size(&v) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   74-block  0
call    3 never executed
        1:   75:	destroy(&v);
        1:   75-block  0
call    0 returned 1
        -:   76:
        1:   77:}
function testIterate called 1 returned 100% blocks executed 77%
        1:   78:void testIterate() {
        1:   78-block  0
        1:   79:	MyList v = createEmpty();
        1:   79-block  0
call    0 returned 1
        1:   80:	Masina m1 = createMasina("BH14ECM", "Seat Ibiza", "Coupe");
call    0 returned 1
        1:   81:	Masina m2 = createMasina("BH19CLD", "Ford Mondeo", "Docker");
call    0 returned 1
        1:   82:	Masina m3 = createMasina("B77TTT", "Chevrolet Aveo", "SUV");
call    0 returned 1
        -:   83:
        1:   84:	add(&v, m1);
call    0 returned 1
        1:   85:	add(&v, m2);
call    0 returned 1
        1:   86:	add(&v, m3);
call    0 returned 1
        -:   87:
        1:   88:	assert(size(&v) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   88-block  0
call    3 never executed
        1:   89:	Masina m = get(&v, 0);
        1:   89-block  0
call    0 returned 1
        -:   90:
        1:   91:	assert(strcmp(m.nr_inmat, "BH14ECM")==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   91-block  0
call    2 never executed
        1:   92:	assert(strcmp(m.model, "Seat Ibiza")==0);
        1:   92-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   92-block  1
call    2 never executed
        1:   93:	assert(strcmp(m.categorie, "Coupe")==0);
        1:   93-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   93-block  1
call    2 never executed
        -:   94:
        1:   95:	destroy(&v);
        1:   95-block  0
call    0 returned 1
        1:   96:	assert(size(&v) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   96-block  0
call    3 never executed
        -:   97:
        1:   98:}
        -:   99:
function testCopy called 1 returned 100% blocks executed 83%
        1:  100:void testCopy() {
        1:  100-block  0
        1:  101:	MyList v1 = createEmpty();
        1:  101-block  0
call    0 returned 1
        1:  102:	add(&v1, createMasina("BH14ECM", "Seat Ibiza", "Coupe"));
call    0 returned 1
call    1 returned 1
        1:  103:	add(&v1, createMasina("BH19CLD", "Ford Mondeo", "Docker"));
call    0 returned 1
call    1 returned 1
        -:  104:
        1:  105:	assert(size(&v1) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  105-block  0
call    3 never executed
        1:  106:	MyList v2 = copyList(&v1);
        1:  106-block  0
call    0 returned 1
        1:  107:	assert(size(&v2) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  107-block  0
call    3 never executed
        1:  108:	Masina m = get(&v2, 0);
        1:  108-block  0
call    0 returned 1
        1:  109:	assert(strcmp(m.model, "Seat Ibiza") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  109-block  0
call    2 never executed
        -:  110:
        1:  111:	destroy(&v1);
        1:  111-block  0
call    0 returned 1
        1:  112:	destroy(&v2);
call    0 returned 1
        -:  113:
        1:  114:}
